{"title":"Installation and Setup","markdown":{"headingText":"Installation and Setup","containsRefs":false,"markdown":"\n## Installation\n\n- Install R and Rstudio (available from ECCC Software Centre)\n  - Software Centre can be very slow to install, you can install R and\n    RStudio without administrator permissions from the internet as well\n    <https://posit.co/download/rstudio-desktop/>\n- Install Git <https://gitforwindows.org/> (does not require admin\n  permissions)\n  - NOTE: When asked about “Adjusting your PATH environment”, make sure\n    to select “Git from the command line and also from 3rd-party\n    software”. Otherwise, accept the defaults.\n- Create a GitHub account <https://github.com/>\n\n- Install R packages: Open RStudio and run in the console:\n  - `install.packages(\"usethis\")`\n\n\n## Set username and email for git\n\n- `usethis::use_git_config(user.name = \"Jane Doe\", user.email = \"jane@example.org\")`\n  - `user.name` is the name associated with your git commits so just\n    make it informative for your collaborators (ie: actual name, github\n    username)\n  - `user.email` must match your GitHub account email\n\n\n## Let git talk to GitHub\n\n- `usethis::create_github_token()`\n  - Opens GitHub webpage: select “repo”, “user”, and “workflow” scopes\n- `gitcreds::gitcreds_set()`\n\n\n\n## Start a new project with GitHub\n\n**Step 1**: Make a new repo on GitHub + Go to <https://github.com> and\nmake sure you are logged in. \n\n+ Near “Repositories”, click the big green “New” button.\n  - How to fill this in:\n    - Repository template: No template.\n    - Repository name: myrepo . Like a variable name, in code:\n      descriptive but brief, no whitespace. Letters, digits, - , . , or\n      \\_ are allowed.\n    - Description: any short description of the project\n    - Public.\n    - Initialize this repository with: Add a README file.\n    - Click the big green button that says “Create repository”.\n\n**Step 2**: Copy repo URL + Now click the big green button that says\n“\\<\\> Code”. \n\n+ Copy a clone URL to your clipboard. Use the HTTPS URL.\n\n![](assets/img/clone_url.png)\n\n**Step 3**: Clone into a new project in RStudio\n\n- File \\> New Project \\> Version Control \\> Git. In the “repository URL”\n  paste the URL of your new GitHub repository.\n  - Be intentional about where you create this Project. Don't put it inside another git repository.\n  - I suggest you “Open in new session”.\n- Click “Create Project” to create a new directory,\n- This should download the README.md file that we created on GitHub in\n  the previous step. Look in RStudio’s file browser pane for the\n  README.md file.\n- Behind the scenes, RStudio has done this for you:\n  `git clone https://github.com/see24/myrepo.git`\n\n\n\n## Work on a project\n+ Edit the README.md file, e.g., by adding the line “This is a line from RStudio”. \n+ Save the file locally \n+ On the Git pane click commit \n\n![](assets/img/git_pane.png)\n\n+ In the pop-up review the changes at the bottom \n+ Check the “Staged” box and type a commit message and click “Commit”\n\n![](assets/img/git_commit_modal.png) \n\n\n\n## Sync changes to GitHub: Push\n\n + Click “Push” in the Rstudio Git pane\n + Look at the repo on GitHub so see the new line is there\n \n![](assets/img/push.png)\n\n\n\n## Sync local copy from GitHub: Pull\n\n+ In the GitHub repo main page  \n+ In the upper right corner of the Readme, click on the pencil \n+ Add a line eg : “Line added from GitHub.” \n+ Click “Commit changes.”\n+ In RStudio click Pull on the Git pane \n+ You should see the new line in the Readme\n\n![](assets/img/pull.png)\n\n\n\n## Add an existing project to GitHub\n\n- Create a new repo and Rstudio project in the same way as above\n- Simply copy all files into the newly created folder on your local\n  computer\n- Stage and commit all files that you **want to store on GitHub**\n  - Nothing sensitive ie passwords, keys etc ( you can have a private\n    repo if you are not ready to share code with the world)\n  - Probably not large datasets\n  - Use . gitignore to avoid git tracking things (more on this later)\n\n*This is the simplest way to do it but there is more advance, more\ntraditional git way to do it:\n<https://happygitwithr.com/existing-github-last.html>*\n\n\n\n## Git Terminology 1\n\n- Repository (repo): Folder that contains a hidden .git file that tracks\n  changes made to files in that folder. The folder can “live” on your\n  local computer or a server like GitHub’s. On GitHub the repository is\n  also the web page where all the files are stored among other things\n- Push: Copy changes from your local version of the repo to the GitHub\n  version\n- Pull: Copy changes from the GitHub version of the repo to you local\n  version\n- Clone: make a copy of a git repository. By default in R studio this is\n  connected to the GitHub version (called the remote or origin)\n- Commit: A marker that is kept in the git history and helps to\n  incrementally track changes. Made useful by descriptive commit\n  messages\n\n\n\n## When to commit\n\n- Often!\n- But not too often!\n  - Use “Amend previous commit” checkbox when you want to make sure to\n    commit but aren’t sure you are done yet\n- Try to make each commit distinct and accomplish one thing\n  - `Make data cleaning script`\n  - `Create exploratory plots`\n  - `Fix bug in data cleaning handling of dates`\n  - `Update exploratory plots with dates`\n\n\n\n## What to commit\n\n- Everything!\n  - Git can track any file but it does a better job with raw text files\n    (eg: .R, .Rmd, .html, .md, .py, .sh, .txt)\n  - For files like word docs or pdfs it can’t track the content and\n    tracks to whole file every time you make a change\n- Except!:\n  - Nothing sensitive ie passwords, keys etc (you can have a private\n    repo if you are not ready to share code with the world but still)\n  - Probably not large datasets. I just keep these locally but would be\n    better to have them on a shared drive and download them\n    programmatically\n- .gitignore: a file at the top level of git repo that tells git what\n  not to track.\n  - Uses regular expressions to match file or folder names or types.\n  - Example file:\n    <https://github.com/LandSciTech/caribouMetrics/blob/master/.gitignore>\n     \\## When to push\n- Fairly often. If you are working alone pushing is a way to back up\n  your files. If you are collaborating it is away to make your work\n  available to others. If you don’t push and then a collaborator makes\n  changes to the same file it gets a bit tricky (but fixable).\n- Once you push you can’t use the “Amend previous commit” trick\n- If you find yourself reluctant to push because you aren’t ready for\n  others to use your work consider making a branch (see below)\n\n\n\n## When to pull\n\n- Ideally every day, or when a collaborator lets you know they pushed\n- Pulling often prevents getting out of sync with collaborators\n- Before pulling be sure to commit all your local work\n\n\n\n## Merge conflicts in Push/Pull\n\n- If a collaborator pushed their changes after you last pulled you will\n  need to pull before you can push. If your changes don’t conflict git\n  will automatically merge their changes with yours.\n- Merge conflicts: when a collaborator made changes that overlap your\n  changes. Git can’t automatically fit them together you have to review\n  and pick the part to keep.\n\n\n\n## Resolving merge conflicts\n\nAh! I pulled at the start of the day but then a collaborator pushed a\nchange to the same line and now when I try to push it says I have to\npull first and then when I pull I get merge conflicts!\n\nNot too hard to fix. Go through each file that has the orange U in the\nGit pane. Find the location of the conflict. HEAD is your local version\nand the alphanumeric string is the commit id for the remote version that\nconflicts. Pick the one you want and delete all the marker lines\n(\\<\\<\\<, === and \\>\\>\\>). Then commit and continue on with your work\n![](assets/img/merge_conflict.png)\n\n\n\n## Avoiding merge conflicts\n\n- Pull regularly\n- Keep in touch with collaborators so you are not working on the same\n  lines at the same time.\n- Use a branch\n\n\n\n## Branches\n\n- A stream of commits that diverges from the main stream until it is\n  ready to re-join.\n- Helpful for starting a new version of something while making sure\n  others can keep using the old version’\n- Example we want to convert some functions used in a paper to become an\n  R package but Josie is working on writing the paper and needs the old\n  version to keep working. I make a branch where I re-arrange everything\n  into a package. If Josie makes changes to the main branch that affect\n  the functions I can see those and merge them into my branch.\n- See <https://happygitwithr.com/git-branches.html##git-branches> for how\n  to manage branches with the command line but it can also be done\n  through the Rstudio IDE and GitHub for the most part.\n\n\n\n## Tour of GitHub repository page\n\n- Code\n- Issues\n- Wiki\n- Settings\n\n\n\n## Other stuff if time\n\n- Making a repo work like a simple website\n  <https://happygitwithr.com/workflows-browsability.html##workflows-browsability>\n- Installing a Git Client\n  <https://happygitwithr.com/git-client.html##git-client>\n- Good default folder structure and setup for a typical analysis\n  project: <https://frbcesab.github.io/rcompendium/index.html>\n\n\n\n## Disclaimer\n\n- I copied almost everything from this Guide by Jenny Bryan:\n  <https://happygitwithr.com/index.html>\n\n\n\n## Advanced Uses\n\n- Host a website:\n  <https://www.emilyzabor.com/tutorials/rmarkdown_websites_tutorial.html>\n- Use GitHub Actions for continuous integration:\n  <https://beamilz.com/posts/series-gha/2022-series-gha-1-what-is/en/>\n- Using GitHub to manage frequently updated data:\n  - <https://doi.org/10.1371/journal.pbio.3000125>  \n  - <https://www.updatingdata.org/githubactions/>\n  - <https://doi.org/10.1111/2041-210X.13982>\n\n\n\n## Issues with installation\n\nIf RStudio is not finding a git installation: + Restart RStudio and try\nagain + If still not working, run this in the windows command line:\n`git --exec-path` + Copy the path, then in RStudio click Tools \\> Global\nOptions \\> Git/SVN and set the Git executable by clicking browse,\npasting the path in the address bar and selecting the git.exe file. +\nRestart RStudio again\n\nSee <https://happygitwithr.com/rstudio-see-git.html> for more\ninstructions on troubleshooting\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"setup.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.475","bibliography":["references.bib"],"editor":"visual","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"setup.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["references.bib"],"editor":"visual","documentclass":"scrreprt"},"extensions":{"book":{}}}}}