[
  {
    "objectID": "setup.html#installation",
    "href": "setup.html#installation",
    "title": "1  Installation and Setup",
    "section": "1.1 Installation",
    "text": "1.1 Installation\n\nInstall R and Rstudio (available from ECCC Software Centre)\n\nSoftware Centre can be very slow to install, you can install R and RStudio without administrator permissions from the internet as well https://posit.co/download/rstudio-desktop/\n\nInstall Git https://gitforwindows.org/ (does not require admin permissions)\n\nNOTE: When asked about “Adjusting your PATH environment”, make sure to select “Git from the command line and also from 3rd-party software”. Otherwise, accept the defaults.\n\nCreate a GitHub account https://github.com/\nInstall R packages: Open RStudio and run in the console:\n\ninstall.packages(\"usethis\")"
  },
  {
    "objectID": "setup.html#set-username-and-email-for-git",
    "href": "setup.html#set-username-and-email-for-git",
    "title": "1  Installation and Setup",
    "section": "1.2 Set username and email for git",
    "text": "1.2 Set username and email for git\n\nusethis::use_git_config(user.name = \"Jane Doe\", user.email = \"jane@example.org\")\n\nuser.name is the name associated with your git commits so just make it informative for your collaborators (ie: actual name, github username)\nuser.email must match your GitHub account email"
  },
  {
    "objectID": "setup.html#let-git-talk-to-github",
    "href": "setup.html#let-git-talk-to-github",
    "title": "1  Installation and Setup",
    "section": "1.3 Let git talk to GitHub",
    "text": "1.3 Let git talk to GitHub\n\nusethis::create_github_token()\n\nOpens GitHub webpage: select “repo”, “user”, and “workflow” scopes\n\ngitcreds::gitcreds_set()"
  },
  {
    "objectID": "setup.html#start-a-new-project-with-github",
    "href": "setup.html#start-a-new-project-with-github",
    "title": "1  Installation and Setup",
    "section": "1.4 Start a new project with GitHub",
    "text": "1.4 Start a new project with GitHub\nStep 1: Make a new repo on GitHub + Go to https://github.com and make sure you are logged in.\n\nNear “Repositories”, click the big green “New” button.\n\nHow to fill this in:\n\nRepository template: No template.\nRepository name: myrepo . Like a variable name, in code: descriptive but brief, no whitespace. Letters, digits, - , . , or _ are allowed.\nDescription: any short description of the project\nPublic.\nInitialize this repository with: Add a README file.\nClick the big green button that says “Create repository”.\n\n\n\nStep 2: Copy repo URL + Now click the big green button that says “<> Code”.\n\nCopy a clone URL to your clipboard. Use the HTTPS URL.\n\n\nStep 3: Clone into a new project in RStudio\n\nFile > New Project > Version Control > Git. In the “repository URL” paste the URL of your new GitHub repository.\n\nBe intentional about where you create this Project. Don’t put it inside another git repository.\nI suggest you “Open in new session”.\n\nClick “Create Project” to create a new directory,\nThis should download the README.md file that we created on GitHub in the previous step. Look in RStudio’s file browser pane for the README.md file.\nBehind the scenes, RStudio has done this for you: git clone https://github.com/see24/myrepo.git"
  },
  {
    "objectID": "setup.html#start-a-new-project-with-github-1",
    "href": "setup.html#start-a-new-project-with-github-1",
    "title": "1  Installation and Setup",
    "section": "1.5 Start a new project with GitHub",
    "text": "1.5 Start a new project with GitHub\n\nStep 3: Clone into a new project in RStudio\nFile > New Project > Version Control > Git. In the “repository URL” paste the URL of your new GitHub repository.\n\nBe intentional about where you create this Project.\nI suggest you “Open in new session”.\n\nClick “Create Project” to create a new directory,\nThis should download the README.md file that we created on GitHub in the previous step. Look in RStudio’s file browser pane for the README.md file.\nBehind the scenes, RStudio has done this for you: git clone https://github.com/see24/myrepo.git"
  },
  {
    "objectID": "setup.html#start-a-new-project-with-github-2",
    "href": "setup.html#start-a-new-project-with-github-2",
    "title": "1  Installation and Setup",
    "section": "1.6 Start a new project with GitHub",
    "text": "1.6 Start a new project with GitHub\n\nStep 3: Clone into a new project in RStudio\nFile > New Project > Version Control > Git. In the “repository URL” paste the URL of your new GitHub repository.\n\nBe intentional about where you create this Project.\nI suggest you “Open in new session”.\n\nClick “Create Project” to create a new directory,\nThis should download the README.md file that we created on GitHub in the previous step. Look in RStudio’s file browser pane for the README.md file.\nBehind the scenes, RStudio has done this for you: git clone https://github.com/see24/myrepo.git"
  },
  {
    "objectID": "setup.html#work-on-a-project",
    "href": "setup.html#work-on-a-project",
    "title": "1  Installation and Setup",
    "section": "1.5 Work on a project",
    "text": "1.5 Work on a project\n\nEdit the README.md file, e.g., by adding the line “This is a line from RStudio”.\nSave the file locally\nOn the Git pane click commit\n\n\n\nIn the pop-up review the changes at the bottom\nCheck the “Staged” box and type a commit message and click “Commit”"
  },
  {
    "objectID": "setup.html#sync-changes-to-github-push",
    "href": "setup.html#sync-changes-to-github-push",
    "title": "1  Installation and Setup",
    "section": "1.6 Sync changes to GitHub: Push",
    "text": "1.6 Sync changes to GitHub: Push\n\nClick “Push” in the Rstudio Git pane\nLook at the repo on GitHub so see the new line is there"
  },
  {
    "objectID": "setup.html#sync-local-copy-from-github-pull",
    "href": "setup.html#sync-local-copy-from-github-pull",
    "title": "1  Installation and Setup",
    "section": "1.7 Sync local copy from GitHub: Pull",
    "text": "1.7 Sync local copy from GitHub: Pull\n\nIn the GitHub repo main page\n\nIn the upper right corner of the Readme, click on the pencil\nAdd a line eg : “Line added from GitHub.”\nClick “Commit changes.”\nIn RStudio click Pull on the Git pane\nYou should see the new line in the Readme"
  },
  {
    "objectID": "setup.html#add-an-existing-project-to-github",
    "href": "setup.html#add-an-existing-project-to-github",
    "title": "1  Installation and Setup",
    "section": "1.8 Add an existing project to GitHub",
    "text": "1.8 Add an existing project to GitHub\n\nCreate a new repo and Rstudio project in the same way as above\nSimply copy all files into the newly created folder on your local computer\nStage and commit all files that you want to store on GitHub\n\nNothing sensitive ie passwords, keys etc ( you can have a private repo if you are not ready to share code with the world)\nProbably not large datasets\nUse . gitignore to avoid git tracking things (more on this later)\n\n\nThis is the simplest way to do it but there is more advance, more traditional git way to do it: https://happygitwithr.com/existing-github-last.html"
  },
  {
    "objectID": "setup.html#git-terminology-1",
    "href": "setup.html#git-terminology-1",
    "title": "1  Installation and Setup",
    "section": "1.9 Git Terminology 1",
    "text": "1.9 Git Terminology 1\n\nRepository (repo): Folder that contains a hidden .git file that tracks changes made to files in that folder. The folder can “live” on your local computer or a server like GitHub’s. On GitHub the repository is also the web page where all the files are stored among other things\nPush: Copy changes from your local version of the repo to the GitHub version\nPull: Copy changes from the GitHub version of the repo to you local version\nClone: make a copy of a git repository. By default in R studio this is connected to the GitHub version (called the remote or origin)\nCommit: A marker that is kept in the git history and helps to incrementally track changes. Made useful by descriptive commit messages"
  },
  {
    "objectID": "setup.html#when-to-commit",
    "href": "setup.html#when-to-commit",
    "title": "1  Installation and Setup",
    "section": "1.10 When to commit",
    "text": "1.10 When to commit\n\nOften!\nBut not too often!\n\nUse “Amend previous commit” checkbox when you want to make sure to commit but aren’t sure you are done yet\n\nTry to make each commit distinct and accomplish one thing\n\nMake data cleaning script\nCreate exploratory plots\nFix bug in data cleaning handling of dates\nUpdate exploratory plots with dates"
  },
  {
    "objectID": "setup.html#what-to-commit",
    "href": "setup.html#what-to-commit",
    "title": "1  Installation and Setup",
    "section": "1.11 What to commit",
    "text": "1.11 What to commit\n\nEverything!\n\nGit can track any file but it does a better job with raw text files (eg: .R, .Rmd, .html, .md, .py, .sh, .txt)\nFor files like word docs or pdfs it can’t track the content and tracks to whole file every time you make a change\n\nExcept!:\n\nNothing sensitive ie passwords, keys etc (you can have a private repo if you are not ready to share code with the world but still)\nProbably not large datasets. I just keep these locally but would be better to have them on a shared drive and download them programmatically\n\n.gitignore: a file at the top level of git repo that tells git what not to track.\n\nUses regular expressions to match file or folder names or types.\nExample file: https://github.com/LandSciTech/caribouMetrics/blob/master/.gitignore ## When to push\n\nFairly often. If you are working alone pushing is a way to back up your files. If you are collaborating it is away to make your work available to others. If you don’t push and then a collaborator makes changes to the same file it gets a bit tricky (but fixable).\nOnce you push you can’t use the “Amend previous commit” trick\nIf you find yourself reluctant to push because you aren’t ready for others to use your work consider making a branch (see below)"
  },
  {
    "objectID": "setup.html#when-to-pull",
    "href": "setup.html#when-to-pull",
    "title": "1  Installation and Setup",
    "section": "1.12 When to pull",
    "text": "1.12 When to pull\n\nIdeally every day, or when a collaborator lets you know they pushed\nPulling often prevents getting out of sync with collaborators\nBefore pulling be sure to commit all your local work"
  },
  {
    "objectID": "setup.html#merge-conflicts-in-pushpull",
    "href": "setup.html#merge-conflicts-in-pushpull",
    "title": "1  Installation and Setup",
    "section": "1.13 Merge conflicts in Push/Pull",
    "text": "1.13 Merge conflicts in Push/Pull\n\nIf a collaborator pushed their changes after you last pulled you will need to pull before you can push. If your changes don’t conflict git will automatically merge their changes with yours.\nMerge conflicts: when a collaborator made changes that overlap your changes. Git can’t automatically fit them together you have to review and pick the part to keep."
  },
  {
    "objectID": "setup.html#resolving-merge-conflicts",
    "href": "setup.html#resolving-merge-conflicts",
    "title": "1  Installation and Setup",
    "section": "1.14 Resolving merge conflicts",
    "text": "1.14 Resolving merge conflicts\nAh! I pulled at the start of the day but then a collaborator pushed a change to the same line and now when I try to push it says I have to pull first and then when I pull I get merge conflicts!\nNot too hard to fix. Go through each file that has the orange U in the Git pane. Find the location of the conflict. HEAD is your local version and the alphanumeric string is the commit id for the remote version that conflicts. Pick the one you want and delete all the marker lines (<<<, === and >>>). Then commit and continue on with your work"
  },
  {
    "objectID": "setup.html#avoiding-merge-conflicts",
    "href": "setup.html#avoiding-merge-conflicts",
    "title": "1  Installation and Setup",
    "section": "1.15 Avoiding merge conflicts",
    "text": "1.15 Avoiding merge conflicts\n\nPull regularly\nKeep in touch with collaborators so you are not working on the same lines at the same time.\nUse a branch"
  },
  {
    "objectID": "setup.html#branches",
    "href": "setup.html#branches",
    "title": "1  Installation and Setup",
    "section": "1.16 Branches",
    "text": "1.16 Branches\n\nA stream of commits that diverges from the main stream until it is ready to re-join.\nHelpful for starting a new version of something while making sure others can keep using the old version’\nExample we want to convert some functions used in a paper to become an R package but Josie is working on writing the paper and needs the old version to keep working. I make a branch where I re-arrange everything into a package. If Josie makes changes to the main branch that affect the functions I can see those and merge them into my branch.\nSee https://happygitwithr.com/git-branches.html##git-branches for how to manage branches with the command line but it can also be done through the Rstudio IDE and GitHub for the most part."
  },
  {
    "objectID": "setup.html#tour-of-github-repository-page",
    "href": "setup.html#tour-of-github-repository-page",
    "title": "1  Installation and Setup",
    "section": "1.17 Tour of GitHub repository page",
    "text": "1.17 Tour of GitHub repository page\n\nCode\nIssues\nWiki\nSettings"
  },
  {
    "objectID": "setup.html#other-stuff-if-time",
    "href": "setup.html#other-stuff-if-time",
    "title": "1  Installation and Setup",
    "section": "1.18 Other stuff if time",
    "text": "1.18 Other stuff if time\n\nMaking a repo work like a simple website https://happygitwithr.com/workflows-browsability.html##workflows-browsability\nInstalling a Git Client https://happygitwithr.com/git-client.html##git-client\nGood default folder structure and setup for a typical analysis project: https://frbcesab.github.io/rcompendium/index.html"
  },
  {
    "objectID": "setup.html#disclaimer",
    "href": "setup.html#disclaimer",
    "title": "1  Installation and Setup",
    "section": "1.19 Disclaimer",
    "text": "1.19 Disclaimer\n\nI copied almost everything from this Guide by Jenny Bryan: https://happygitwithr.com/index.html"
  },
  {
    "objectID": "setup.html#advanced-uses",
    "href": "setup.html#advanced-uses",
    "title": "1  Installation and Setup",
    "section": "1.20 Advanced Uses",
    "text": "1.20 Advanced Uses\n\nHost a website: https://www.emilyzabor.com/tutorials/rmarkdown_websites_tutorial.html\nUse GitHub Actions for continuous integration: https://beamilz.com/posts/series-gha/2022-series-gha-1-what-is/en/\nUsing GitHub to manage frequently updated data:\n\nhttps://doi.org/10.1371/journal.pbio.3000125\n\nhttps://www.updatingdata.org/githubactions/\nhttps://doi.org/10.1111/2041-210X.13982"
  },
  {
    "objectID": "setup.html#issues-with-installation",
    "href": "setup.html#issues-with-installation",
    "title": "1  Installation and Setup",
    "section": "1.21 Issues with installation",
    "text": "1.21 Issues with installation\nIf RStudio is not finding a git installation: + Restart RStudio and try again + If still not working, run this in the windows command line: git --exec-path + Copy the path, then in RStudio click Tools > Global Options > Git/SVN and set the Git executable by clicking browse, pasting the path in the address bar and selecting the git.exe file. + Restart RStudio again\nSee https://happygitwithr.com/rstudio-see-git.html for more instructions on troubleshooting"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "git-basics.html#git-terminology-1",
    "href": "git-basics.html#git-terminology-1",
    "title": "2  Using Git",
    "section": "2.1 Git Terminology 1",
    "text": "2.1 Git Terminology 1\n\nRepository (repo): Folder that contains a hidden .git file that tracks changes made to files in that folder. The folder can “live” on your local computer or a server like GitHub’s. On GitHub the repository is also the web page where all the files are stored among other things\nPush: Copy changes from your local version of the repo to the GitHub version\nPull: Copy changes from the GitHub version of the repo to you local version\nClone: make a copy of a git repository. By default in R studio this is connected to the GitHub version (called the remote or origin)\nCommit: A marker that is kept in the git history and helps to incrementally track changes. Made useful by descriptive commit messages"
  },
  {
    "objectID": "git-basics.html#when-to-commit",
    "href": "git-basics.html#when-to-commit",
    "title": "2  Using Git",
    "section": "2.2 When to commit",
    "text": "2.2 When to commit\n\nOften!\nBut not too often!\n\nUse “Amend previous commit” checkbox when you want to make sure to commit but aren’t sure you are done yet\n\nTry to make each commit distinct and accomplish one thing. eg:\n\nMake data cleaning script\nCreate exploratory plots\nFix bug in data cleaning handling of dates\nUpdate exploratory plots with dates"
  },
  {
    "objectID": "git-basics.html#what-to-commit",
    "href": "git-basics.html#what-to-commit",
    "title": "2  Using Git",
    "section": "2.3 What to commit",
    "text": "2.3 What to commit\n\nEverything!\n\nGit can track any file but it does a better job with raw text files (eg: .R, .Rmd, .html, .md, .py, .sh, .txt)\nFor files like word docs or pdfs it can’t track the content and tracks the whole file every time you make a change\n\nExcept!:\n\nNothing sensitive ie passwords, keys etc (you can have a private repo if you are not ready to share code with the world but still don’t store passwords)\nProbably not large datasets. I just keep these locally but would be better to have them on a shared drive and download them programmatically\n\n.gitignore: a file at the top level of git repo that tells git what not to track.\n\nUses regular expressions to match file or folder names or types.\nExample file: https://github.com/LandSciTech/caribouMetrics/blob/master/.gitignore"
  },
  {
    "objectID": "git-basics.html#when-to-push",
    "href": "git-basics.html#when-to-push",
    "title": "2  Using Git",
    "section": "2.4 When to push",
    "text": "2.4 When to push\n\nFairly often. If you are working alone pushing is a way to back up your files. If you are collaborating it is a way to make your work available to others. If you don’t push and then a collaborator makes changes to the same file it gets a bit tricky (but fixable).\nOnce you push you can’t use the “Amend previous commit” trick\nIf you find yourself reluctant to push because you aren’t ready for others to use your work consider making a branch (see below)"
  },
  {
    "objectID": "git-basics.html#when-to-pull",
    "href": "git-basics.html#when-to-pull",
    "title": "2  Using Git",
    "section": "2.5 When to pull",
    "text": "2.5 When to pull\n\nIdeally every day, or when a collaborator lets you know they pushed\nPulling often prevents getting out of sync with collaborators\nBefore pulling be sure to commit all your local work\nGood practice to pull before pushing but git will normally warn you if you forget."
  },
  {
    "objectID": "git-basics.html#merge-conflicts-in-pushpull",
    "href": "git-basics.html#merge-conflicts-in-pushpull",
    "title": "2  Using Git",
    "section": "2.6 Merge conflicts in Push/Pull",
    "text": "2.6 Merge conflicts in Push/Pull\n\nIf a collaborator pushed their changes after you last pulled you will need to pull before you can push. If your changes don’t conflict git will automatically merge their changes with yours.\nMerge conflicts: when a collaborator made changes that overlap your changes. Git can’t automatically fit them together you have to review and pick the part to keep."
  },
  {
    "objectID": "git-basics.html#resolving-merge-conflicts",
    "href": "git-basics.html#resolving-merge-conflicts",
    "title": "2  Using Git",
    "section": "2.7 Resolving merge conflicts",
    "text": "2.7 Resolving merge conflicts\nAh! I pulled at the start of the day but then a collaborator pushed a change to the same line and now when I try to push it says I have to pull first.\n\nAnd then when I pull I get merge conflicts!\nNot too hard to fix. Go through each file that has the orange U in the Git pane. Find the location of the conflict. HEAD is your local version and the alphanumeric string is the commit id for the remote version that conflicts. Pick the one you want and delete all the marker lines (<<<, === and >>>). Then commit and continue on with your work"
  },
  {
    "objectID": "git-basics.html#avoiding-merge-conflicts",
    "href": "git-basics.html#avoiding-merge-conflicts",
    "title": "2  Using Git",
    "section": "2.8 Avoiding merge conflicts",
    "text": "2.8 Avoiding merge conflicts\n\nPull regularly\nKeep in touch with collaborators so you are not working on the same lines at the same time.\nUse a branch"
  },
  {
    "objectID": "git-basics.html#branches",
    "href": "git-basics.html#branches",
    "title": "2  Using Git",
    "section": "2.9 Branches",
    "text": "2.9 Branches\n\nA stream of commits that diverges from the main stream until it is ready to re-join.\nHelpful for starting a new version of something while making sure others can keep using the old version’\nExample we want to convert some functions used in a paper to become an R package but Josie is working on writing the paper and needs the old version to keep working. I make a branch where I re-arrange everything into a package. If Josie makes changes to the main branch that affect the functions I can see those and merge them into my branch.\nSee https://happygitwithr.com/git-branches.html##git-branches for how to manage branches with the command line but it can also be done through the Rstudio IDE and GitHub for the most part."
  },
  {
    "objectID": "git-basics.html#tour-of-github-repository-page",
    "href": "git-basics.html#tour-of-github-repository-page",
    "title": "2  Using Git",
    "section": "2.10 Tour of GitHub repository page",
    "text": "2.10 Tour of GitHub repository page\n\nCode\nIssues\nWiki\nSettings"
  }
]